(function () {
  /**
   * Функция сортирует массив по возрастанию алгоритмом быстрой сортировки
   * @param {Array} array - Функция принимает в качестве параметра неотсортированный массив чисел
   * @returns {*} - Функция возвращает массив отсортированных по возрастанию чисел
   */
  const quickSortAscending = function (array) {
    if (array.length < 2) { // базовый случай: массивы с 0 и 1 элементом не нуждаются в сортировке
      return array;
    } else { // рекурсивный случай
      let pivot = array[0]; // выбираем опорный элемент
      let restArray = array.slice(1); // сохраняем оставшиеся элементы массива в отдельный массив
      let lessArray = []; // подмассив для меньших, чем опорный, элементов
      let greaterArray = []; // подмассив для больших, чем опорный, элементов
      for (let i = 0; i < restArray.length; i++) { // перебираем и распределяем элементы из массива оставшихся элементов по массивам меньших и больших элементов
        let currentItem = restArray[i]; // записываем текущий элемент в переменную для лучшего восприятия кода
        if (currentItem <= pivot ) {
          lessArray.push(currentItem); // если текущий меньше опорного, то кладём его последним в подмассив меньших элементов
        } else {
          greaterArray.push(currentItem); // если текущий больше опорного, то кладём его последним в подмассив больших элементов
        }
      }
      let sortedLessArray = quickSortAscending(lessArray); // вызываем быструю сортировку для подмассива меньших элементов
      let sortedGreaterArray = quickSortAscending(greaterArray); // вызываем быструю сортировку для подмассива больших элементов
      return sortedLessArray.concat(pivot, sortedGreaterArray); // склеиваем подмассивы с опорным элементом и возвращаем отсортированный массив всех элементов
    }
  };

  console.log('Массив после сортировки по возрастанию ' + quickSortAscending([3, 10, 5, 2, 7, 4, 9, 1, 6, 8]));
})();